[[search-request-body]]
== 使用请求体搜索

搜索请求可以通过搜索 DSL 来执行，其请求体中包含
<<query-dsl,查询 DSL>> 。
下面是一个例子：

[source,js]
--------------------------------------------------
GET /twitter/_search
{
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

以及响应的示例：

[source,js]
--------------------------------------------------
{
    "took": 1,
    "timed_out": false,
    "_shards":{
        "total" : 1,
        "successful" : 1,
        "skipped" : 0,
        "failed" : 0
    },
    "hits":{
        "total" : 1,
        "max_score": 1.3862944,
        "hits" : [
            {
                "_index" : "twitter",
                "_type" : "_doc",
                "_id" : "0",
                "_score": 1.3862944,
                "_source" : {
                    "user" : "kimchy",
                    "message": "trying out Elasticsearch",
                    "date" : "2009-11-15T14:12:12",
                    "likes" : 0
                }
            }
        ]
    }
}
--------------------------------------------------
// TESTRESPONSE[s/"took": 1/"took": $body.took/]

[float]
=== 参数

[horizontal]
`timeout`::

    搜索超时设置，将搜索请求绑定在指定时间限制内执行。
    并保证返回超时时已经累积的命中结果。利用 <<global-search-cancellation>> 机制，
    在搜索请求达到超时时限后其将被取消。
    默认为无超时，请参阅 <<time-units>> 。

`from`::

    从指定的偏移处取回命中结果。默认为 `0` 。

`size`::

    需要返回的命中结果的数量。默认为 `10` 。如果你对返回一些命中的结果并不关心，
    而只关注匹配到的结果总数以及/或者希望进行一些聚合操作，
    将该值设置为 `0` 会对性能有所帮助。

`search_type`::

    待执行搜索操作的类型。可以是
    `dfs_query_then_fetch` 或 `query_then_fetch` 。
    默认为 `query_then_fetch` 。
    详见 <<search-request-search-type,_搜索类型_>> 。

`request_cache`::

    当 `size` 被设置为 0 时，将该值设置为 `true` 或 `false`
    来启用或禁用搜索结果的缓存，例如聚合以及搜索建议（无命中结果返回）。
    参阅 <<shard-request-cache>> 。

`allow_partial_search_results`::

    如若设置为 `false` ，当搜索产生部分结果时将整体返回为失败。
    默认为 true，当超时或部分失败时允许返回部分结果。
    该默认值可以通过集群级别的配置项
    `search.default_allow_partial_results` 来控制。

`terminate_after`::

    每个分片采集的最大文档数量，当超过该值时查询执行会提前终止。
    当设置后，响应中会包含一个布尔字段 `terminated_early`
    来表示查询执行是否被提前终止。
    默认为未设置 terminate_after 。

`batched_reduce_size`::

    在协调节点中应当立即减少的分片结果数量。
    如果搜索请求的潜在分片数可能非常大时，
    该值应当作为一种减少对于每个请求内存开销的保护机制。



除此之外，必须将 `search_type` 、 `request_cache` 以及 `allow_partial_search_results`
作为查询字符串参数进行传递。请求的其他部分应当放在自身的请求体中进行传递。
请求体的内容也可以作为一个 REST 参数 `source` 进行传递。

HTTP GET 以及 HTTP POST 都可以用于执行带请求体的搜索请求。
由于并不是所有的客户端都支持带请求体的 GET 请求，
POST 请求也是允许的。

[float]
=== 快速检查是否命中了任意文档

NOTE: `terminate_after` 总是在 `post_filter` **之后** 应用并停止查询，
       同样地，当在分片中收集到足够的命中结果后停止聚合的执行操作。
       然而聚合的文档数可能不会反映出响应结果中的 `hits.total` 值，
       因为聚合操作是在后续的过滤操作 **之前** 被应用的。

假如我们只想知道是否有任意文档匹配到某个指定的搜索请求，
我们可以将 `size` 设置为 `0` 来表示我们对命中的具体结果并不感兴趣。
并且我们可以将 `terminate_after` 设置为 `1`
来表示搜索的执行可以在匹配到第一个文档之后就结束（每个分片）。

[source,js]
--------------------------------------------------
GET /_search?q=message:number&size=0&terminate_after=1
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

当 `size` 为 `0` 时，响应中不会包含任何命中结果。
`hits.total` 可能是 `0` ，表示没有任何匹配的文档，
或者大于 `0` 意味着当请求被提前终止时至少有如此多的文档匹配该查询。
如果查询被提前终止，响应中的 `terminated_early` 标志会被设置为 `true` 。

[source,js]
--------------------------------------------------
{
  "took": 3,
  "timed_out": false,
  "terminated_early": true,
  "_shards": {
    "total": 1,
    "successful": 1,
    "skipped" : 0,
    "failed": 0
  },
  "hits": {
    "total": 1,
    "max_score": 0.0,
    "hits": []
  }
}
--------------------------------------------------
// TESTRESPONSE[s/"took": 3/"took": $body.took/]

响应中的 `took` 字段表示处理该请求所消耗的毫秒数，
当节点接收到该请求时便开始计时，在完成所有搜索相关工作后，
上文 JSON 返回至客户端之前停止计时。这意味着它包含了等待线程池所消耗的时间，
以及跨整个集群执行分布式搜索并获取所有结果的时间。

include::request/query.asciidoc[]

include::request/from-size.asciidoc[]

include::request/sort.asciidoc[]

include::request/source-filtering.asciidoc[]

include::request/stored-fields.asciidoc[]

include::request/script-fields.asciidoc[]

include::request/docvalue-fields.asciidoc[]

include::request/post-filter.asciidoc[]

include::request/highlighting.asciidoc[]

include::request/rescore.asciidoc[]

include::request/search-type.asciidoc[]

include::request/scroll.asciidoc[]

include::request/preference.asciidoc[]

include::request/explain.asciidoc[]

include::request/version.asciidoc[]

include::request/index-boost.asciidoc[]

include::request/min-score.asciidoc[]

include::request/named-queries-and-filters.asciidoc[]

include::request/inner-hits.asciidoc[]

include::request/collapse.asciidoc[]

include::request/search-after.asciidoc[]
