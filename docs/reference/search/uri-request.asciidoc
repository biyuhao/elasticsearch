[[search-uri-request]]
== URI 搜索

一个搜索请求可以完全通过指定 URI 请求参数来执行。
并不是所有搜索选项都可用于这种模式下的搜索请求，
但是当你只是简单快速地通过 curl 进行一些测试时这将非常方便。
下面是一个例子：

[source,js]
--------------------------------------------------
GET twitter/_search?q=user:kimchy
--------------------------------------------------
// CONSOLE
// TEST[setup:twitter]

这是一个响应的示例：

[source,js]
--------------------------------------------------
{
    "timed_out": false,
    "took": 62,
    "_shards":{
        "total" : 1,
        "successful" : 1,
        "skipped" : 0,
        "failed" : 0
    },
    "hits":{
        "total" : 1,
        "max_score": 1.3862944,
        "hits" : [
            {
                "_index" : "twitter",
                "_type" : "_doc",
                "_id" : "0",
                "_score": 1.3862944,
                "_source" : {
                    "user" : "kimchy",
                    "date" : "2009-11-15T14:12:12",
                    "message" : "trying out Elasticsearch",
                    "likes": 0
                }
            }
        ]
    }
}
--------------------------------------------------
// TESTRESPONSE[s/"took": 62/"took": "$body.took"/]

[float]
=== 参数

URI 支持以下参数：

[cols="<,<",options="header",]
|=======================================================================
|名字 |描述
|`q` |查询字符串 （对应于 `query_string` 查询，详见
<<query-dsl-query-string-query,_Query String 查询_>> ）。

|`df` |当查询中未指定域（field）前缀时默认使用的域。

|`analyzer` |在分析查询字符串时使用的分析器（analyzer）的名字。

|`analyze_wildcard` |通配符或前缀查询是否被分析，默认为 `false` 。

|`batched_reduce_size` |在协调节点中应当立即减少的分片结果数量。
如果搜索请求的潜在分片数可能非常大时，该值应当作为一种减少对于每个请求内存开销的保护机制。

|`default_operator` |默认使用的运算符，可以为 `AND` 或者 `OR` ， 默认为 `OR` 。

|`lenient` |如果设置为 true 将会忽略格式错误（例如向数值类型的域提供了字符串值）。
默认为 false 。

|`explain` |对于每条匹配记录，将会包含对于该记录的分值是如何计算而来的解释。

|`_source`|设置为 `false` 将会禁用取回 `_source` 域。
你还可以使用 `_source_include` 和 `_source_exclude` 来取回部分文档
（详见文档 <<search-request-source-filtering, 请求体>>）

|`stored_fields` |有选择地返回命中文档的存储域（stored fields），使用逗号分隔。
不指定任何值将不会返回任何域。

|`sort` |结果排序，可以是以下几种形式 `fieldName` 或者
`fieldName:asc`/`fieldName:desc` 。fieldName 可以为文档中实际的域，
或者使用 `_score` 来表示使用搜索结果的得分来排序。
可以使用多个 `sort` 参数（按先后顺序）。

|`track_scores` |在指定排序时，可以将该项设置为 `true` 始终来计算得分，
并在每个命中结果中返回。

|`track_total_hits` |设置为 `false` 来禁用返回所有命中结果总数。
（详见 <<index-modules-index-sorting,_索引排序_>> ）。
默认为 true 。

|`timeout` |搜索超时设置，将搜索请求绑定在指定时间限制内执行，
并保证返回超时时已经累积的命中结果。
默认为无超时设置。

|`terminate_after` |每个分片最大采集文档数量，当超过该数量时查询执行会提前终止。
当设置后，响应中会包含一个布尔字段 `terminated_early`
来表示查询执行是否被提前终止。
默认为未设置 terminate_after 。

|`from` |命中结果中的位置索引，将从该处为起始返回结果。默认为 `0` 。

|`size` |将返回的命中结果数量。默认为 `10` 。

|`search_type` |待执行搜索操作的类型。
可以是 `dfs_query_then_fetch` 或 `query_then_fetch` 。
默认为 `query_then_fetch` 。
更多关于可供选择的不同搜索类型详见 <<search-request-search-type,_搜索类型_>> 。

|`allow_partial_search_results` |如若设置为 `false` ，当搜索产生部分结果时将整体返回为失败。
默认为 true，当超时或部分失败时允许返回部分结果。该默认值可以通过集群级别的配置项
`search.default_allow_partial_results` 来控制。
|=======================================================================
